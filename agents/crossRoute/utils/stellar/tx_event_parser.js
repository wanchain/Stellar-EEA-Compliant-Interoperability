/*
 * Copyright (c) 2019 Wanchain. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

const decoder = require("./decoder");
const {hexTrip0x, hexToAscii} = require("../../comm/lib");

const { xdr, scValToNative } = require("@stellar/stellar-sdk");

function get_nodes_of_sorobanMeta(transactionMeta) {
   const obj1 = transactionMeta[0].nodes[0];
   const result = obj1.nodes.filter(e => e.type === "sorobanMeta");
   if(result.length != 1) throw new Error("Invalid or unknown transaction");
  if(!result[0].nodes) {
    return [];
  }
   return result[0].nodes;
 }

function get_nodes_of_events(transactionMeta) {
  const nodes_of_sorobanMeta = get_nodes_of_sorobanMeta(transactionMeta);
  if(nodes_of_sorobanMeta.length === 0) {
    return [];
  }
  const result = nodes_of_sorobanMeta.filter(e => e.type === "events");
  if(result.length != 1) throw new Error("Invalid or unknown transaction");
  if(!result[0].nodes) {
    return [];
  }
  return result[0].nodes;
}

function get_all_events(result_meta_xdr) {
  const transactionMeta = decoder.decodeFromXDR(result_meta_xdr, "TransactionMeta");
  const event_info_list = get_nodes_of_events(transactionMeta);

  let process_finalEventNode = function (finalEventNode) {
    const contractId = (finalEventNode.nodes.filter( e => e.type === "contractId"))[0].value;
    const nodes_of_eventBody = (finalEventNode.nodes.filter( e => e.type === "body"))[0].nodes;
    if(nodes_of_eventBody.length != 1) throw new Error("Invalid or unknown transaction");

    const topics = nodes_of_eventBody[0].nodes[0];
    const data = nodes_of_eventBody[0].nodes[1];
    return {contractId, topics, data};
  }

  let events = event_info_list.map( evtInfo => process_finalEventNode(evtInfo));
  return events;
}

if(false){ //  test:

  var result_meta_xdr = ''

  const events = get_all_events(result_meta_xdr);
  console.log(events);

  const finalEventData = get_events_data_by(events, "CBRX5ZTJ4KMAR2VTO3LIKQWIVOHE2SVDYNAMZQORNUK2GO72TXL4MDG5", ["CrosschainFunctionCall",])
  console.log("finalEventData size: ", finalEventData.length)
  finalEventData.forEach(evtData => {
    console.log("finalEventData: ", evtData)
    let timestamp = Date.now();
    timestamp = parseInt(timestamp / 1000);
    evtData.timestamp = timestamp;
    // console.log("functionCallData.messageData: ", evtData.functionCallData.messageData);
  })
  console.log("finalEventData: ", finalEventData);
}

/**
 *
 * @param events:  instance of {contractId, topics, data} structure, for example, the return by above 'get_all_events' method.
 * @param expected_contractId:  which contract emitted this event
 * @param expected_topics:      array of topic elements to match
 */
function get_events_data_by(events, expected_contractId, expected_topics) {
  let result = [];
  events.map(e => {
    if(e.contractId === expected_contractId) {
      const expectedTopicNum = expected_topics.length;
      const actualTopics = e.topics.nodes;

      let bTopicMatched = false;
      let matchedEventName = "";
      for(let i = 0; i < expectedTopicNum; i++) {
        if(expected_topics.includes(actualTopics[0].nodes[0].value)) {
          bTopicMatched = true;
          matchedEventName = actualTopics[0].nodes[0].value;
          break;
        }
      }

      if(!bTopicMatched) return;
      if(e.data.type !== "data" || e.data.value !== "[scvVec]") return

      const dataVec = e.data.nodes[0];
      const [taskIdNode, networkIdNode, contractAddressNode, finalFuncCallDataNode] = dataVec.nodes;

      const taskIdHexArrayStr = taskIdNode.nodes[0].value;
      const networkIdBigNum = networkIdNode.nodes[0].value;   // of peer chain
      const contractAddressHexArrayStr  = contractAddressNode.nodes[0].value;  // of peer chain
      const finalFuncCallDataHexArrayStr = finalFuncCallDataNode.nodes[0].value;

      let taskId = Buffer.from(JSON.parse(taskIdHexArrayStr)).toString("hex");
      const networkId = networkIdBigNum;

      let contractAddress = "";
      if(contractAddressNode.value === "[scvAddress]") { // Workaround approach
        // is a string --- dedicated to 'InboundTaskExecuted' event.
        taskId = hexToAscii(hexTrip0x(taskId));
        contractAddress = contractAddressHexArrayStr;
      }else{
        // is a buffer --- dedicated to 'OutboundTaskExecuted' event.
        contractAddress = Buffer.from(JSON.parse(contractAddressHexArrayStr)).toString(); // nft-market address;
      }

      result.push({
        event: matchedEventName, // event name, such as 'OutboundTaskExecuted', 'CrosschainFunctionCall'
        args:{
          "taskId" : taskId,
          "networkId": networkId,  // of peer chain
          "contractAddress": contractAddress, // on peer chain
          "functionCallData": finalFuncCallDataHexArrayStr,
        },
        })
    }
  })
  return result;
}

exports.eventParser = get_all_events;
exports.get_events_data_by = get_events_data_by;


